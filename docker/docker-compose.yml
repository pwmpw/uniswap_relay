version: '3.8'

services:
  uniswap-relay-dapp:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: uniswap-relay-dapp
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - REDIS_CHANNEL=${REDIS_CHANNEL:-swap_events}
      - UNISWAP_V2_SUBGRAPH_URL=${UNISWAP_V2_SUBGRAPH_URL:-https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2}
      - UNISWAP_V3_SUBGRAPH_URL=${UNISWAP_V3_SUBGRAPH_URL:-https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3}
    ports:
      - "8080:8080"  # Health check
      - "9090:9090"  # Metrics
    depends_on:
      - redis
    networks:
      - uniswap-network
    volumes:
      - ../config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: uniswap-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - uniswap-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Optional: Redis Commander for monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: uniswap-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - uniswap-network

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: uniswap-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - uniswap-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: uniswap-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - uniswap-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  uniswap-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 