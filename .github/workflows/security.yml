name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run every day at 2:00 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo-audit:
    name: Cargo Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Check dependency sorting
        run: |
          # Install cargo-sort if not available
          if ! command -v cargo-sort &> /dev/null; then
            cargo install cargo-sort
          fi
          cargo sort --check

      - name: Install cargo-audit
        run: |
          cargo install cargo-audit --version 0.21.2

      - name: Run security audit
        run: cargo audit

  trivy:
    name: Trivy Vulnerability Scanner
    runs-on: ubuntu-latest
    if: false # Trivy is not used in this project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Uniswap Relay DApp'
          path: '.'
          format: 'HTML'
          out: 'reports'

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check dependency sorting
        run: |
          # Install cargo-sort if not available
          if ! command -v cargo-sort &> /dev/null; then
            cargo install cargo-sort
          fi
          cargo sort --check

      - name: Install cargo-license
        run: |
          cargo install cargo-license --version 0.4.2

      - name: Check licenses
        run: |
          echo "Checking dependency licenses..."
          cargo license --json > licenses.json
          
          # Check for potentially problematic licenses
          if grep -q "GPL\|AGPL\|MPL" licenses.json; then
            echo "⚠️  Found potentially problematic licenses:"
            grep -E "GPL|AGPL|MPL" licenses.json
            echo "Please review these licenses for compatibility with your project."
          else
            echo "✅ All licenses appear to be compatible"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: false # Secret scanning is not used in this project
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install gitleaks
        uses: gitleaks/gitleaks-action@v2

      - name: Run gitleaks
        run: |
          gitleaks detect --source . --report-format sarif --report-path gitleaks-report.sarif || true

      - name: Check if gitleaks report exists
        run: |
          if [ -f "gitleaks-report.sarif" ]; then
            echo "✅ Gitleaks report found"
            ls -la gitleaks-report.sarif
          else
            echo "ℹ️  No gitleaks report generated (no secrets found)"
            # Create empty SARIF file to prevent upload error
            echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0-rtm.5.json","runs":[{"tool":{"driver":{"name":"gitleaks","version":"8.0.0"}},"results":[]}]}' > gitleaks-report.sarif
          fi

      - name: Upload gitleaks results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gitleaks-report.sarif'

  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [cargo-audit, trivy, codeql, dependency-check, license-check, secret-scanning]
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "🔒 Security Scan Summary"
          echo "========================"
          echo "Cargo Audit: ${{ needs.cargo-audit.result }}"
          echo "Trivy: ${{ needs.trivy.result }}"
          echo "CodeQL: ${{ needs.codeql.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "License Check: ${{ needs.license-check.result }}"
          echo "Secret Scanning: ${{ needs.secret-scanning.result }}"
          
          # Check if any security scans failed
          if [[ "${{ needs.cargo-audit.result }}" == "failure" ]] || \
             [[ "${{ needs.trivy.result }}" == "failure" ]] || \
             [[ "${{ needs.codeql.result }}" == "failure" ]] || \
             [[ "${{ needs.dependency-check.result }}" == "failure" ]] || \
             [[ "${{ needs.license-check.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scanning.result }}" == "failure" ]]; then
            echo "🚨 Security issues detected! Please review the scan results."
            exit 1
          else
            echo "✅ All security scans passed successfully!"
          fi 